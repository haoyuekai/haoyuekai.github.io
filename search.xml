<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Css画QQ企鹅]]></title>
    <url>%2F2018%2F06%2F12%2FCss-QQ%2F</url>
    <content type="text"><![CDATA[写在前面随着Css高速发展，很多精致的效果已经可以不用依赖js、图片就可以实现。比如，接下来要绘制的QQ企鹅。 效果见： http://www.haoyuekai.com/others/CSS/QQ.html 开始绘制小企鹅分析小企鹅结构分析小企鹅身体结构。大致把企鹅分为头、身体、手、脚。 123456&lt;div id="qq"&gt; &lt;div id="head" class='head'&gt;&lt;/div&gt; &lt;div id="body" class="body"&gt;&lt;/div&gt; &lt;div id="hand" class="handWrapper"&gt;&lt;/div&gt; &lt;div id="foot" class='footWrapper'&gt;&lt;/div&gt;&lt;/div&gt; 绘制整体样式 12345678910111213/*qq*/#qq &#123; width: 420px; height: 400px; margin: 0 auto; margin-top: 100px; position: relative; display:block; -webkit-animation-name: startAni; -webkit-animation-duration: 1s; -moz-animation-name: startAni; -moz-animation-duration: 1s;&#125; 绘制小企鹅接下来，按照划分的结构，分别绘制 头部首先，绘制小企鹅的头部，还是先分析头部结构，划分为：眼睛（左右眼、眼球）、嘴巴（上下嘴唇、嘴角）。 123456789101112131415161718192021222324252627282930&lt;div id="head" class="head"&gt; &lt;div class='left eye'&gt; &lt;div class="eyelipLeftTop blink"&gt;&lt;/div&gt; &lt;div class="eyelipLeftBottom blink"&gt;&lt;/div&gt; &lt;div class="innerLeftEye blink"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='right eye'&gt; &lt;div class="eyelipRightTop blink"&gt;&lt;/div&gt; &lt;div class="eyelipRightBottom blink"&gt;&lt;/div&gt; &lt;div class="innerRightEye blink"&gt; &lt;div class="fix"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='mouthTopContainer'&gt; &lt;div class='mouthTop'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="mouthBottomContainer"&gt; &lt;div class="mouthBottom"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="lipsContainer"&gt; &lt;div class="lips"&gt; &lt;div class="lipShadow left" id="lsl"&gt; &lt;/div&gt; &lt;div class="lipShadow right" id="lsr"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/head&gt; 开始绘制小企鹅头部 1234567891011121314.head&#123; position: absolute; top:18px; left: 96px; width: 234px; height: 185px; border: 1px solid #000; border-top-left-radius: 117px 117px; border-top-right-radius: 117px 117px; border-bottom-left-radius: 117px 68px; border-bottom-right-radius: 117px 68px; z-index:10; background-color: #000;&#125; *眼睛123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130.eye&#123; width: 44px; height: 66px; border:1px solid #000; border-radius: 50% 50%; position: absolute; background: #fff;&#125;.left.eye&#123; left:62px; top:50px; &#125;.right.eye&#123; left:123px; top:50px;&#125;.innerLeftEye&#123; position: absolute; top: 20px; left: 20px; width: 18px; height: 24px; border-radius: 50%; border: 1px solid #000; background: #000;&#125;.innerLeftEye:after&#123; content: ""; position: absolute; width: 6px; height: 8px; background: white; z-index: 11; top: 6px; left: 9px; border-radius: 50%;&#125;.innerLeftEye:before&#123; content: ""; position: absolute; width: 3px; height: 4px; background: white; z-index: 11; top: 14px; left: 4px; border-radius: 50%;&#125;.innerLeftEye.blink&#123; -webkit-animation-name: innerEyeBlink; -webkit-animation-duration: .2s; -webkit-animation-iteration-count: infinite; -webkit-transform-origin: 9px 12px; -moz-animation-name: innerEyeBlink; -moz-animation-duration: .2s; -moz-animation-iteration-count: infinite; -moz-transform-origin: 9px 12px;&#125;/*右眼同左眼*/.innerRightEye&#123; position: absolute; top: 20px; right: 20px; width: 18px; height: 24px; border-radius: 50%; border: 1px solid #000; background: #000;&#125;.innerRightEye:after&#123; content: ""; position: absolute; width: 6px; height: 8px; background: white; z-index: 11; top: 6px; right: 9px; border-radius: 50%;&#125;.innerRightEye:before&#123; content: ""; position: absolute; width: 3px; height: 4px; background: white; z-index: 11; top: 14px; right: 4px; border-radius: 50%;&#125;.innerRightEye.blink&#123; -webkit-animation-name: innerEyeBlink; -webkit-animation-duration: .2s; -webkit-animation-iteration-count: infinite; -webkit-transform-origin: 9px 12px; -moz-animation-name: innerEyeBlink; -moz-animation-duration: .2s; -moz-animation-iteration-count: infinite; -moz-transform-origin: 9px 12px;&#125;.eyelipLeftTop.blink, .eyelipRightTop.blink,.eyelipLeftBottom.blink, .eyelipRightBottom.blink&#123; display: block; height: 0px; position: absolute; width: 46px; background: black; border: 1px black solid; z-index: 100; -webkit-animation-name: eyelipAni1; -webkit-animation-duration: 4s; -webkit-animation-iteration-count: infinite; -moz-animation-name: eyelipAni1; -moz-animation-duration: 4s; -moz-animation-iteration-count: infinite;&#125;.eyelipLeftTop, .eyelipRightTop&#123; top: -2px; left: -2px; display: none;&#125;.eyelipLeftBottom, .eyelipRightBottom&#123; bottom:-2px; left:-2px; display: none;&#125; *嘴巴1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283.mouthTopContainer &#123; position: absolute; width: 158px; height: 29px; z-index: 1; top: 120px; left: 39px; overflow: hidden;&#125;.mouthTop&#123; width: 158px; height: 34px; position: absolute; z-index: 1; border:1px solid #FFA600; background: #FFA600; top: 0; left: 0; border-top-left-radius: 45% 34px; border-top-right-radius: 45% 34px; /*background-color: #FFA600; */&#125;.mouthBottomContainer &#123; position: absolute; width: 158px; height: 15px; z-index: 1; top: 146px; left: 39px; overflow: hidden;&#125;.mouthBottom&#123; width: 158px; height: 24px; position: absolute; z-index: 1; border:1px solid #FFA600; background: #FFA600; border-top:none; top: -4px; left: 0; border-bottom-left-radius: 45% 24px; border-bottom-right-radius: 45% 24px; background-color: #FFA600; &#125;.lips&#123; border: 1px solid #FFA600; background: #FFA600; width: 116px; height: 24px; position: absolute; top: 146px; left: 60px; border-top: none; border-bottom-left-radius: 50% 100%; border-bottom-right-radius: 50% 100%;&#125;.lipShadow &#123; width: 0px; height: 0px; position: absolute; z-index: 2; border-top: 20px solid transparent; border-bottom: 20px solid transparent; border-right: 8px solid black; -webkit-transform-origin: top right; -webkit-transform: rotate(-60deg); -moz-transform-origin: top right; -moz-transform: rotate(-60deg); -o-transform-origin: top right; -o-transform: rotate(-60deg); transform-origin: top right; transform: rotate(-60deg); left: -12px; top: 4px;&#125;.lipShadow.right&#123; left:114px; -webkit-transform: rotate(60deg) rotateY(180deg); -moz-transform: rotate(60deg) rotateY(180deg); -o-transform: rotate(60deg) rotateY(180deg); transform: rotate(60deg) rotateY(180deg);&#125; 身体分析小企鹅身体结构，划分为：围巾、肚子 1234567891011121314151617181920&lt;div id="body" class="body"&gt; &lt;div class="innerWrapper"&gt; &lt;div class="inner"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="outterWrapper"&gt; &lt;div class = 'outter'&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="scarf"&gt; &lt;div class="scarfShadow"&gt; &lt;/div&gt; &lt;div class="scarfShadowRight"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="scarfEnd"&gt; &lt;div class="scarfEndShadow"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 开始绘制小企鹅身体 12345678.body&#123; width: 326px; height: 300px; /*border: 1px solid black;*/ top: 135px; left: 48px; position: absolute;&#125; *围巾 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071.scarf &#123; border: 4px solid #000; position: absolute; background: #FB0009; z-index: 5; width: 258px; height: 110px; top: -2px; left: 34px; border-top-left-radius: 30px 34px; border-top-right-radius: 38px 34px; border-bottom-left-radius: 50% 76px; border-bottom-right-radius: 50% 76px; border-top: none; &#125;.scarfShadow &#123; position: absolute; border-top: 6px solid #000; width: 60px; height: 70px; top: 0px; left: 6px; border-top-left-radius: 90px 120px; border-top-right-radius: 30px 30px; -webkit-transform: rotate(-79deg); -moz-transform: rotate(-79deg); -o-transform: rotate(-79deg); transform: rotate(-79deg);&#125;.scarfShadowRight &#123; position: absolute; border-right: 6px solid black; width: 100px; height: 70px; top: 8px; left: 143px; border-bottom-right-radius: 70px 70px; z-index: 6;&#125;.scarfEnd&#123; position: absolute; width: 52px; height: 64px; z-index: 4; top: 90px; border: 3px solid black; left: 74px; border-bottom-left-radius: 50% 43%; border-bottom-right-radius: 15px; border-top-left-radius: 20% 57%; background: #FB0009;&#125;.scarfEndShadow&#123; position: absolute; border-top: 6px solid black; width: 20px; height: 20px; top: 6px; left: 12px; border-top-left-radius: 30px 30px; -webkit-transform-origin: top right; -moz-transform-origin: top right; -o-transform-origin: top right; transform-origin: top right; z-index: 10; -webkit-transform: skewX(4deg) scaleY(1.5) rotate(-60deg); -moz-transform: skewX(4deg) scaleY(1.5) rotate(-60deg); -o-transform: skewX(4deg) scaleY(1.5) rotate(-60deg); transform: skewX(4deg) scaleY(1.5) rotate(-60deg);&#125; *肚子 12345678910111213141516171819202122232425262728293031323334353637.innerWrapper&#123; position: absolute; overflow: hidden; width: 280px; height: 200px; left: 30px; top: 76px;&#125;.inner &#123; border: 1px solid #000; width: 218px; position: absolute; height: 210px; border-radius: 50%; left: 25px; top: -71px; z-index: 4; background: #fff;&#125;.outterWrapper&#123; width: 262px; left: 32px; height: 250px; position: absolute; top: 54px; overflow: hidden;&#125;.outter&#123; border: 1px solid #000; width: 260px; height: 250px; border-radius: 125px; position: absolute; top: -84px; z-index: 3; background: #000;&#125; 小手小企鹅手的结构比较简单 123456789101112131415161718&lt;div id="hand" class="handWrapper"&gt; &lt;div class="leftHandTopContainer"&gt; &lt;div class="leftHandTop"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="leftHandBottomContainer"&gt; &lt;div class="leftHandBottom"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="rightHandTopContainer"&gt; &lt;div class="rightHandTop"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="rightHandBottomContainer"&gt; &lt;div class="rightHandBottom"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 开始绘制 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119.handWrapper&#123; position: absolute; top: 219px; left: 7px;&#125;.leftHandTopContainer&#123; width: 118px; height: 26px; position: absolute; z-index: 1; top: 55px; left: 50px; -webkit-transform-origin: bottom left; -webkit-transform: rotate(-70deg); -moz-transform-origin: bottom left; -moz-transform: rotate(-70deg); -o-transform-origin: bottom left; -o-transform: rotate(-70deg); transform-origin: bottom left; transform: rotate(-70deg); overflow: hidden;&#125;.leftHandTop&#123; width: 128px; height: 54px; border: 1px solid #050346; position: absolute; border-top-left-radius: 44% 38px; border-top-right-radius: 56% 33px; background: #000;&#125;.leftHandBottomContainer &#123; width: 115px; height: 30px; position: absolute; z-index: 1; top: 78px; left: 50px; -webkit-transform-origin: top left; -webkit-transform: rotate(-70deg); -moz-transform-origin: top left; -moz-transform: rotate(-70deg); -o-transform-origin: top left; -o-transform: rotate(-70deg); transform-origin: top left; transform: rotate(-70deg); overflow: hidden;&#125;.leftHandBottom&#123; width: 128px; height: 44px; border: 1px solid #050346; background: #000; border-top: none; position: absolute; border-bottom-left-radius: 48% 20px; border-bottom-right-radius: 52% 23px; top: -26px;&#125;.rightHandTopContainer&#123; width: 118px; height: 34px; position: absolute; z-index: 3; top: 47px; left: 240px; -webkit-transform-origin: bottom right; -webkit-transform: rotate(65deg); -moz-transform-origin: bottom right; -moz-transform: rotate(65deg); -o-transform-origin: bottom right; -o-transform: rotate(65deg); transform-origin: bottom right; transform: rotate(65deg); overflow: hidden;&#125;.rightHandTop&#123; width: 148px; height: 54px; border: 1px solid #050346; position: absolute; border-top-right-radius: 41% 54px; border-top-left-radius: 59% 48px; background: black; left: -30px; -webkit-transform: rotateY(-180deg); -moz-transform: rotateY(-180deg); -o-transform: rotateY(-180deg); transform: rotateY(-180deg);&#125;.rightHandBottomContainer&#123; width: 110px; height: 58px; position: absolute; z-index: 1; top: 81px; left: 248px; -webkit-transform-origin: top right; -webkit-transform: rotate(90deg); -moz-transform-origin: top right; -moz-transform: rotate(90deg); -o-transform-origin: top right; -o-transform: rotate(90deg); transform-origin: top right; transform: rotate(90deg); overflow: hidden;&#125;.rightHandBottom&#123; width: 68px; height: 28px; border: 1px solid #000; background: black; border-top: none; position: absolute; top: 1px; left: 38px; border-bottom-right-radius: 100% 40px; z-index: 999;&#125; 脚丫小企鹅脚丫的结构分为： 脚掌、脚趾 123456789101112131415161718192021&lt;div id="foot" class='footWrapper'&gt; &lt;div class="leftFootTopWrapper"&gt; &lt;div class="leftFootTop"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="leftFootBottomWrapper"&gt; &lt;div class="leftFootBottom"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='toe left'&gt;&lt;/div&gt; &lt;div class="rightFootTopWrapper"&gt; &lt;div class="rightFootTop"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="rightFootBottomWrapper"&gt; &lt;div class="rightFootBottom"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class='toe right'&gt;&lt;/div&gt;&lt;/div&gt; 开始绘制小脚丫 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112.footWrapper&#123; position: absolute; top: 292px; left: 80px;&#125;.leftFootTopWrapper &#123; position: absolute; width: 130px; top: 16px; left: -1px; height: 37px; overflow: hidden; z-index: 2;&#125;.leftFootTop&#123; position: absolute; width: 120px; height: 60px; border: 4px solid black; background: #FF9C00; border-top-left-radius: 80% 70%; top: -10px; left: 3px;&#125;.toe &#123; position: absolute; border-top: 4px solid black; width: 25px; height: 20px; top: 50px; left: 2px; border-top-right-radius: 30px 30px; border-top-left-radius: 10px 10px; -webkit-transform-origin: top left; -moz-transform-origin: top left; -o-transform-origin: top left; transform-origin: top left; z-index: 10; -webkit-transform: rotate(-45deg); -moz-transform: rotate(-45deg); -o-transform: rotate(-45deg); transform: rotate(-45deg);&#125;.toe.right&#123; -webkit-transform: rotate(45deg) rotateY(180deg); -moz-transform: rotate(45deg) rotateY(180deg); -o-transform: rotate(45deg) rotateY(180deg); transform: rotate(45deg) rotateY(180deg); left: 264px;&#125;.leftFootBottomWrapper &#123; position: absolute; width: 130px; top: 52px; left: -1px; height: 38px; overflow: hidden; z-index: 2;&#125;.leftFootBottom&#123; position: absolute; width: 120px; height: 60px; border: 4px solid #000; background: #FF9C00; border-top-left-radius: 50% 44%; border-top-right-radius: 50% 44%; border-bottom-left-radius: 50% 56%; border-bottom-right-radius: 50% 56%; top: -30px; left: 3px;&#125;.rightFootTopWrapper &#123; position: absolute; width: 134px; top: 22px; left: 134px; height: 36px; overflow: hidden; z-index: 2;&#125;.rightFootTop&#123; position: absolute; width: 120px; height: 60px; border: 4px solid black; background: #FF9C00; border-top-right-radius: 32% 65%; top: 0px; left: 4px;&#125;.rightFootBottomWrapper &#123; position: absolute; width: 134px; top: 52px; left: 134px; height: 38px; overflow: hidden;&#125;.rightFootBottom&#123; position: absolute; width: 120px; height: 60px; border: 4px solid #000; background: #FF9C00; border-top-left-radius: 50% 56%; border-top-right-radius: 50% 56%; border-bottom-left-radius: 50% 44%; border-bottom-right-radius: 50% 44%; top: -30px; left: 3px;&#125; 至此，小企鹅已经基本完成了 添加动画效果接下来，我们为小企鹅添加一些必要的动画，让小企鹅更加活灵活现 眼球自定义动画123456789101112131415161718192021222324252627/*眼球动画*/@-webkit-keyframes innerEyeBlink&#123; from&#123; -webkit-transform: rotate(0deg); &#125; 50%&#123; -webkit-transform: rotate(-5deg) &#125; 100% &#123; -webkit-transform: rotate(0deg) &#125;&#125;@-moz-keyframes innerEyeBlink&#123; from&#123; -moz-transform: rotate(0deg); &#125; 50%&#123; -moz-transform: rotate(-5deg) &#125; 100% &#123; -moz-transform: rotate(0deg) &#125;&#125; 眨眼自定义动画 12345678910111213141516171819202122232425262728293031323334/*眨眼睛*/@-webkit-keyframes eyelipAni1&#123; from &#123; height: 0px; &#125; 4% &#123; height: 34px; &#125; 8%&#123; height: 0px; &#125; to&#123; height: 0px; &#125;&#125;@-moz-keyframes eyelipAni1&#123; from &#123; height: 0px; &#125; 4% &#123; height: 34px; &#125; 8%&#123; height: 0px; &#125; to&#123; height: 0px; &#125;&#125; 入场动画自定义动画 1234567891011121314151617181920212223242526272829@-webkit-keyframes startAni&#123; from&#123; left: 210px; -webkit-transform: rotate(360deg) scale(.0001); &#125; 70%&#123; -webkit-transform: rotate(0deg) scale(1.5); &#125; to&#123; -webkit-transform: rotate(0deg) scale(1); &#125;&#125;@-moz-keyframes startAni&#123; from&#123; left: 210px; -moz-transform: rotate(360deg) scale(.0001); &#125; 70%&#123; -moz-transform: rotate(0deg) scale(1.5); &#125; to&#123; -moz-transform: rotate(0deg) scale(1); &#125;&#125; 动画效果添加完毕，当然，如果读者朋友有兴趣，还可以拓展一些其他的有趣的动作给我们可爱的小企鹅。 添加Css背景接下来，为我们的小企鹅添加一个好看的背景，因为是纯Css实现，这里不用背景图片，我们使用Css渐变，来绘制一个网格背景 123456789101112131415161718html &#123; background: -webkit-radial-gradient(50vmin 50vmin, #feb4ff, #a3a3ec); background: radial-gradient(50vmin 50vmin, #feb4ff, #a3a3ec); background-position: -20vw center; background-repeat: no-repeat; background-color: #a3a3ec; height: 100%;&#125;html body &#123; width: 100%; height: 100%; margin: 0; padding-top: 100px; box-sizing: border-box; background-image: -webkit-repeating-linear-gradient(330deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6) 1px, transparent 1px, transparent 30px, rgba(255, 255, 255, 0.3) 30px, rgba(255, 255, 255, 0.3) 31px, transparent 31px, transparent 60px), -webkit-repeating-linear-gradient(30deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6) 1px, transparent 1px, transparent 30px, rgba(255, 255, 255, 0.3) 30px, rgba(255, 255, 255, 0.3) 31px, transparent 31px, transparent 60px), -webkit-repeating-linear-gradient(top, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3) 1px, transparent 1px, transparent 30px); background-image: repeating-linear-gradient(120deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6) 1px, transparent 1px, transparent 30px, rgba(255, 255, 255, 0.3) 30px, rgba(255, 255, 255, 0.3) 31px, transparent 31px, transparent 60px), repeating-linear-gradient(60deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6) 1px, transparent 1px, transparent 30px, rgba(255, 255, 255, 0.3) 30px, rgba(255, 255, 255, 0.3) 31px, transparent 31px, transparent 60px), repeating-linear-gradient(to bottom, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3) 1px, transparent 1px, transparent 30px); background-size: 70px 120px;&#125; 总结到这里，一只卡哇伊的小企鹅，已经出现在我们的网页上了。Css来实现绘图，比较复杂，实际中不会用到，但是用来熟悉一下Css的一些属性，还是很不错的。最终的是可以培养一下自己的耐心。基于本人审美确实不怎么样，如果觉得有不满意的地方，可以自行修改，当然了，能分享给我之最好的。源码见https://github.com/haoyuekai/CSS-img/blob/master/QQ.html]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ES6箭头函数]]></title>
    <url>%2F2018%2F06%2F07%2F%E5%85%B3%E4%BA%8EES6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[ES6发布到现在马上就要三年了，作为一个比较守旧的前端，一直也没有个系统的了解（主要是在小公司上班，工作中用不到啊，懒癌晚期的我，又没有足够的动力去系统的学习）。 最近公司项目（外包做的）bug频繁出现，有了用Vue重构的想法。至于为什么不用React，大概是觉得相比较而言，Vue更简单一些吧。在使用Vue脚手架的时候，接触到箭头函数，也是时候应该了解一下了。 好了，废话不多说了，下面说一下关于箭头函数的学习。 基本语法首先，先看一下箭头函数的基本语法： 1let func = value =&gt; value; 相当于： 123let func = function (value) &#123; return value; &#125;; 如果需要给函数传入多个参数： 1let func = (value, num) =&gt; value * num; 如果函数的代码块需要多条语句： 123let func = (value, num) =&gt; &#123; return value * num&#125;; 如果需要直接返回一个对象： 1let func = (value, num) =&gt; (&#123;total: value * num&#125;); 与变量解构结合： 12345678let func = (&#123;value, num&#125;) =&gt; (&#123;total: value * num&#125;)// 使用var result = func(&#123; value: 10, num: 10&#125;)console.log(result); // &#123;total: 100&#125; 比较没有this箭头函数没有 this，所以需要通过查找作用域链来确定 this 的值。 这就意味着如果箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this。 模拟一个实际开发中的例子： 我们的需求是点击一个按钮，改变该按钮的背景色。 为了方便开发，我们抽离一个 Button 组件，当需要使用的时候，直接： 12// 传入元素 id 值即可绑定该元素点击时改变背景色的事件new Button(&quot;button&quot;) HTML 代码如下： 1&lt;button id=&quot;button&quot;&gt;点击变色&lt;/button&gt; JavaScript 代码如下： 1234567891011121314function Button(id) &#123; this.element = document.querySelector(&quot;#&quot; + id); this.bindEvent();&#125;Button.prototype.bindEvent = function() &#123; this.element.addEventListener(&quot;click&quot;, this.setBgColor, false);&#125;;Button.prototype.setBgColor = function() &#123; this.element.style.backgroundColor = &apos;#1abc9c&apos;&#125;;var button = new Button(&quot;button&quot;); 看着好像没有问题，结果却是报错 Uncaught TypeError: Cannot read property ‘style’ of undefined 这是因为当使用 addEventListener() 为一个元素注册事件的时候，事件函数里的 this 值是该元素的引用。 所以如果我们在 setBgColor 中 console.log(this)，this 指向的是按钮元素，那 this.element 就是 undefined，报错自然就理所当然了。 也许你会问，既然 this 都指向了按钮元素，那我们直接修改 setBgColor 函数为： 123Button.prototype.setBgColor = function() &#123; this.style.backgroundColor = &apos;#1abc9c&apos;&#125;; 不就可以解决这个问题了？ 确实可以这样做，但是在实际的开发中，我们可能会在 setBgColor 中还调用其他的函数，比如写成这种： 1234Button.prototype.setBgColor = function() &#123; this.setElementColor(); this.setOtherElementColor();&#125;; 所以我们还是希望 setBgColor 中的 this 是指向实例对象的，这样就可以调用其他的函数。 利用 ES5，我们一般会这样做： 123Button.prototype.bindEvent = function() &#123; this.element.addEventListener(&quot;click&quot;, this.setBgColor.bind(this), false);&#125;; 为避免 addEventListener 的影响，使用 bind 强制绑定 setBgColor() 的 this 为实例对象 使用 ES6，我们可以更好的解决这个问题： 123Button.prototype.bindEvent = function() &#123; this.element.addEventListener(&quot;click&quot;, event =&gt; this.setBgColor(event), false);&#125;; 由于箭头函数没有 this，所以会向外层查找 this 的值，即 bindEvent 中的 this，此时 this 指向实例对象，所以可以正确的调用 this.setBgColor 方法， 而 this.setBgColor 中的 this 也会正确指向实例对象。 在这里再额外提一点，就是注意 bindEvent 和 setBgColor 在这里使用的是普通函数的形式，而非箭头函数，如果我们改成箭头函数，会导致函数里的 this 指向 window 对象 (非严格模式下)。 最后，因为箭头函数没有 this，所以也不能用 call()、apply()、bind() 这些方法改变 this 的指向，可以看一个例子： 123var value = 1;var result = (() =&gt; this.value).bind(&#123;value: 2&#125;)();console.log(result); // 1 没有 arguments箭头函数没有自己的 arguments对象，这不一定是件坏事，因为箭头函数可以访问外围函数的 arguments 对象： 123456function constant() &#123; return () =&gt; arguments[0]&#125;var result = constant(1);console.log(result()); // 1 那如果我们就是要访问箭头函数的参数呢？ 你可以通过命名参数或者 rest 参数的形式访问参数: 1let nums = (...nums) =&gt; nums; 不能通过 new 关键字调用JavaScript 函数有两个内部方法：[[Call]] 和 [[Construct]]。 当通过 new 调用函数时，执行 [[Construct]] 方法，创建一个实例对象，然后再执行函数体，将 this 绑定到实例上。 当直接调用的时候，执行 [[Call]] 方法，直接执行函数体。 箭头函数并没有 [[Construct]] 方法，不能被用作构造函数，如果通过 new 的方式调用，会报错。 12var Foo = () =&gt; &#123;&#125;;var foo = new Foo(); // TypeError: Foo is not a constructor 没有 new.target因为不能使用 new 调用，所以也没有 new.target 值。 关于 new.target，可以参考es6.ruanyifeng.com/#docs/class… 没有原型由于不能使用 new 调用箭头函数，所以也没有构建原型的需求，于是箭头函数也不存在 prototype 这个属性。 12var Foo = () =&gt; &#123;&#125;;console.log(Foo.prototype); // undefined 没有 super连原型都没有，自然也不能通过 super 来访问原型的属性，所以箭头函数也是没有 super 的，不过跟 this、arguments、new.target 一样，这些值由外围最近一层非箭头函数决定。 总结最后，关于箭头函数，引用 MDN 的介绍就是： An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors. 翻译过来就是： 箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。这些函数表达式最适合用于非方法函数(non-method functions)，并且它们不能用作构造函数。 那么什么是 non-method functions 呢？ 我们先来看看 method 的定义： A method is a function which is a property of an object. 对象属性中的函数就被称之为 method，那么 non-mehtod 就是指不被用作对象属性中的函数了，可是为什么说箭头函数更适合 non-method 呢？ 让我们来看一个例子就明白了： 1234567891011var obj = &#123; i: 10, b: () =&gt; console.log(this.i, this), c: function() &#123; console.log( this.i, this) &#125;&#125;obj.b();// undefined Windowobj.c();// 10, Object &#123;...&#125; 自执行函数自执行函数的形式为： 123(function()&#123; console.log(1)&#125;)() 或者 123(function()&#123; console.log(1)&#125;()) 利用箭头简化自执行函数的写法： 123(() =&gt; &#123; console.log(1)&#125;)() 但是注意：使用以下这种写法却会报错： 123(() =&gt; &#123; console.log(1)&#125;()) ES6系列感谢冴羽的文章，作为ES6初学者，站在巨人的肩膀上学习，相对来说，还是简单不少的。更多ES6内容…]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
